package org.acgchat.client;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;

/**
 * The login panel for users
 * Authors: Kelvin, Darren, QiuRong, Jonathan
 * Class: DISM/FT/2B/02
 */
public class ClientGUILogin {
    private JPanel loginPanel;
    private JTextField loginServerIPTextField;
    private JTextField loginUsernameTextField;
    private JPasswordField loginPasswordField;
    private JButton loginButton;
    private JButton loginRegisterButton;
    private JTextField loginServerPortTextField;
    private JFrame init;

    /**
     * Initialize the login panel
     *
     * @param init The {@link JFrame} that holds all the JPanels. Used for switching the JPanels.
     */
    public ClientGUILogin(final JFrame init) {
        this.init = init;
        final ClientGUILogin me = this;
        // Set the action listener of the text field and login button to loginActionListener
        LoginActionListener loginActionListener = new LoginActionListener(me);
        loginServerPortTextField.addActionListener(loginActionListener);
        loginServerIPTextField.addActionListener(loginActionListener);
        loginUsernameTextField.addActionListener(loginActionListener);
        loginPasswordField.addActionListener(loginActionListener);
        loginButton.addActionListener(loginActionListener);

        // Switch the panel to Register when the Register button is pressed.
        loginRegisterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                init.setContentPane(new ClientGUIRegister(init, me).getRegisterPanel());
                init.setTitle("ACG Chat Client Register");
                init.pack();
            }
        });
    }

    /**
     * Get the login panel
     *
     * @return The login panel
     */
    public JPanel getLoginPanel() {
        return this.loginPanel;
    }

    public static void main(String[] args) {
        // Start the program and load the login panel.
        JFrame frame = new JFrame("ACG Chat Client Login");
        frame.setContentPane(new ClientGUILogin(frame).loginPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(4, 4, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Server IP");
        loginPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginServerIPTextField = new JTextField();
        loginServerIPTextField.setText("localhost");
        loginPanel.add(loginServerIPTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(250, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Username");
        loginPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginUsernameTextField = new JTextField();
        loginPanel.add(loginUsernameTextField, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Password");
        loginPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginPasswordField = new JPasswordField();
        loginPanel.add(loginPasswordField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.add(panel1, new GridConstraints(3, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setText("Login");
        panel1.add(loginButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        loginRegisterButton = new JButton();
        loginRegisterButton.setText("Register");
        panel1.add(loginRegisterButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Port");
        loginPanel.add(label4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginServerPortTextField = new JTextField();
        loginServerPortTextField.setText("1500");
        loginPanel.add(loginServerPortTextField, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginPanel;
    }

    /**
     * Used for detecting when the enter key is pressed in any text field or the login button is pressed.
     */
    private class LoginActionListener implements ActionListener {

        private ClientGUILogin me;

        /**
         * Initialize the ActionListener
         *
         * @param me Used to parse to the ClientGUI to switch back to login panel.
         */
        public LoginActionListener(ClientGUILogin me) {
            this.me = me;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            // Check if all the fields are filled in
            if (loginPasswordField.getPassword().length != 0 && loginUsernameTextField.getText().length() != 0 &&
                    loginServerPortTextField.getText().length() != 0 && loginServerIPTextField.getText().length() != 0) {
                // Get all the input values
                String serverIP = loginServerIPTextField.getText();
                String username = loginUsernameTextField.getText();
                String password = new String(loginPasswordField.getPassword());
                int port = -1;

                // Check for valid port number
                if (loginServerPortTextField.getText().matches("^[0-9]{1,5}$") &&
                        (port = Integer.parseInt(loginServerPortTextField.getText())) > 0 && port < 65535) {

                    try {
                        // Start the client GUI and switch to it.
                        ClientGUI clientGUIObject = new ClientGUI(init, me, serverIP, port, "ACGChatCA.cert", true, username, password);

                    } catch (CertificateException | IOException | NoSuchAlgorithmException e1) {
                        JOptionPane.showConfirmDialog(init, "An internal error occurred.", "Error",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        e1.printStackTrace();
                    }

                } else {
                    JOptionPane.showConfirmDialog(init, "Invalid port number!", "Error",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showConfirmDialog(init, "Please field in all the fields!", "Error",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            }
        }
    }

}
