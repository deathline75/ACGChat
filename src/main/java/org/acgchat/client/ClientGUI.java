package org.acgchat.client;

import org.acgchat.common.ChatMessage;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.Date;

/**
 * Created by Kelvin on 16/1/2017.
 */
public class ClientGUI {
    private JPanel mainPanel;
    private JTextField messageTextField;
    private JTextArea messagesTextArea;
    private JButton sendButton;
    private JButton logoutButton;
    private ClientGUIObject clientGUIObject;
    private JFrame init;
    private ClientGUILogin clientGUILogin;
    private String userName;

    public ClientGUI(final JFrame init, final ClientGUILogin clientGUILogin, String server, int port, String cacert, boolean login, String username, String password) throws CertificateException, NoSuchAlgorithmException, IOException {
        this.init = init;
        this.clientGUILogin = clientGUILogin;
        this.userName = username;
        clientGUIObject = new ClientGUIObject(server, port, cacert, login, username, password);

        init.setContentPane(mainPanel);
        init.setTitle("ACG Chat Client");
        init.pack();

        if (login)
            clientGUIObject.system("Attempting to login...");
        else
            clientGUIObject.system("Attempting to register...");

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (clientGUIObject != null)
                    clientGUIObject.disconnect();

                init.setContentPane(clientGUILogin.getLoginPanel());
                init.setTitle("ACG Chat Client Login");
                init.pack();
            }
        });

        if (clientGUIObject.start()) {
            clientGUIObject.system("Connected and logged in!");

            SendMessageActionListener sendMessageActionListener = new SendMessageActionListener();

            messageTextField.setEnabled(true);
            messageTextField.addActionListener(sendMessageActionListener);
            sendButton.setEnabled(true);
            sendButton.addActionListener(sendMessageActionListener);
        } else {
            clientGUIObject.system("Try logging out and logging back in.");
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Enter Message");
        mainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageTextField = new JTextField();
        messageTextField.setEditable(true);
        messageTextField.setEnabled(false);
        messageTextField.setText("");
        mainPanel.add(messageTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(650, 350), null, 0, false));
        messagesTextArea = new JTextArea();
        messagesTextArea.setEditable(false);
        scrollPane1.setViewportView(messagesTextArea);
        sendButton = new JButton();
        sendButton.setEnabled(false);
        sendButton.setText("Send");
        mainPanel.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logoutButton = new JButton();
        logoutButton.setText("Logout");
        mainPanel.add(logoutButton, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public class ClientGUIObject extends Client {

        public ClientGUIObject(String server, int port, String cacert, boolean login, String username, String password) throws CertificateException, IOException, NoSuchAlgorithmException {
            super(server, port, cacert, login, username, password);
        }

        @Override
        public void error(String message) {
            messagesTextArea.append(simpleDateFormat.format(new Date()) + " - SYSTEM: " + message + "\n");
            messagesTextArea.setCaretPosition(messagesTextArea.getText().length() - 1);
            JOptionPane.showConfirmDialog(init, message, "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            log("ERROR", message);
        }

        @Override
        public void chat(String message) {
            messagesTextArea.append(simpleDateFormat.format(new Date()) + " - " + message + "\n");
            messagesTextArea.setCaretPosition(messagesTextArea.getText().length() - 1);
        }

        public void system(String message) {
            chat("SYSTEM: " + message);
        }
    }

    private class SendMessageActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String msg = messageTextField.getText();
            if (msg.equalsIgnoreCase("/logout")) {
                clientGUIObject.sendMessage(new ChatMessage(ChatMessage.ChatMessageType.LOGOUT, userName, ""));
            }
            // message WhoIsIn
            else if (msg.startsWith("/")) {
                clientGUIObject.sendMessage(new ChatMessage(ChatMessage.ChatMessageType.COMMAND, userName, msg.substring(1)));
            } else {                // default to ordinary message
                clientGUIObject.sendMessage(new ChatMessage(ChatMessage.ChatMessageType.MESSAGE, userName, msg));
            }
            messageTextField.setText("");
        }
    }

}
